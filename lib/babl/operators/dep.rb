module Babl
    module Operators
        module Dep
            module DSL
                # Declare dependencies as if they were generated by nav()
                # but without navigating.
                def dep(*path)
                    construct_node(continue: nil) { |node| DepNode.new(node, path) }
                end
            end

            class DepNode
                def initialize(node, path)
                    @node = node
                    @path = canonicalize(path)
                end

                def render(ctx)
                    node.render(ctx)
                end

                def documentation
                    node.documentation
                end

                def pinned_dependencies
                    node.pinned_dependencies
                end

                def dependencies
                    Babl::Utils::Hash.deep_merge(node.dependencies, path)
                end

                private

                def canonicalize(path)
                    case path
                    when ::Array then path.reduce({}) { |a, p| a.merge(canonicalize(p)) }
                    when ::Hash then path.map { |k, v| [k.to_sym, canonicalize(v)] }.to_h
                    else { path.to_sym => {} }
                    end
                end

                attr_reader :node, :path
            end
        end
    end
end
